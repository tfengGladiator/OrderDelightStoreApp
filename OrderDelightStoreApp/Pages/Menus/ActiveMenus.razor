@page "/menus"
@page "/menus/{MenuId}"
@inject DialogService DialogService
@inject StoreAppService StoreAppService
@inject IJSRuntime JSRuntime
 
@if (selectedMenu == null)
{
    <div class="alert alert-danger" role="alert">
        No active menus available.
    </div>
}
else
{
    <div class="menu-container">
        <RadzenRow>
            <RadzenColumn Size="12" SizeMD="9">
                <ul style="list-style-type: none; padding: 0; display: flex; background-color: #f7f6f6; margin-bottom: 0px; overflow-x: auto;">
                    @foreach (var menu in MenuList)
                    {
                        <li style="@($"cursor: pointer; padding: 10px 20px 15px 20px; min-width:200px; max-width:300px; border-bottom: {(menu.id == selectedMenu.id ? "3px solid orange" : "none")}; text-align: center; margin:0 10px 0 10px;")"
                            @onclick="@(() => SelectMenu(menu.id))">
                            <div class="menu-item-name">@(StoreAppService.ResolveLanguage(menu.Names))</div>
                        </li>
                    }
                </ul>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="3">
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenTextBox Placeholder="Search" Style="width: 120px; margin: 15px 0 0 15px;" @bind-Value="searchTerm" Change="@SearchFoodItems" /> <RadzenButton Text="" Style="width: 50px; margin: 15px 0 0 0;" Icon="search" /> <RadzenButton Text="" Style="width: 50px; margin: 15px 20px 0 0;" Icon="clear" Click="@clearSearchText" />
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>


        <div class="nav-container">
            <!-- Category List -->
            <div class="categories-container">
                <RadzenCard Class="rz-mb-3 rz-background-color-success-light">
                    @{
                        var today = ResolveToday(selectedMenu);
                        foreach (var time in today)
                        {
                            <div class="category-time">@time</div>
                        }
                    }
                </RadzenCard>

                <ul class="category-list">
                    @foreach (var cat in Categories)
                    {
                        <li class="@(cat == selectedCategory ? "category-item selected" : "category-item")"
                            @onclick="@(() => SelectCategory(cat))">
                            @cat.Name
                        </li>
                    }
                </ul>
            </div>

            <!-- Food Items -->
            <div class="food-list-container">
                <ul class="food-list">
                    @foreach (var menuItem in filteredMenuFoodItems)
                    {
                        <li class="food-item" @onclick="@(async () => await ViewFoodOptions(menuItem.FoodItem))">
                            <img src="@ResolveImagePath(menuItem.FoodItem)" onerror="imageError(this)" class="food-image">
                            <span class="food-price">@ResolveFoodItemPrice(menuItem.FoodItem)</span>
                            <div class="food-info">
                                <span class="food-name">@ResolveFoodItemName(menuItem.FoodItem)</span>
                            </div>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>


  @*   <!-- Hidden area for printing -->
    <div id="printArea" style="display:none;">
        Hello
    </div>

    <button @onclick="PrintHello">Print Hello</button> *@
}


<style>

   

</style>


@code {

    [Parameter] public string MenuId { get; set; } = "";
    private Category selectedCategory; // Initially no selection
    private List<Category> Categories = new List<Category>();
    private Menu? selectedMenu; // Initially no selection
    ImageSize largeFoodItemImageSize;
    List<Menu> MenuList = new List<Menu>();
    List<FoodItem>? SelectedCategoryFoodItems;
    string[] TodayMenuHours = new string[] { "-" };
    string searchTerm = "";
    List<MenuFoodItem> filteredMenuFoodItems = new List<MenuFoodItem>();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("setupScrollHandling", DotNetObjectReference.Create(this));
        }
    }

    protected override async Task OnInitializedAsync()
    {

        if (StoreAppService.FoodItems == null)
            await StoreAppService.GetFoodItemsAsync();
        if (StoreAppService.PriceLists == null)
            await StoreAppService.LoadPriceListAsync();
        if (StoreAppService.OptionSets == null)
            await StoreAppService.GetOptionSetsAsync();

        await LoadActiveMenus();

        TodayMenuHours = ResolveToday(selectedMenu);
        LoadDefaultCategory();

        LoadCategoryFoodItems();
    }
    private void LoadDefaultCategory()
    {
        if (selectedMenu == null) return;
        Categories = selectedMenu.Categories.Where(c => c.FoodItems.Any()).ToList();
        if (Categories.Any())
            selectedCategory = Categories.FirstOrDefault();
    }
    private async Task LoadActiveMenus()
    {
        var storeLocalTime = CommonUtilities.ConvertToLocalTime(DateTime.UtcNow, StoreAppService.CurrentStore.TimeZoneId);
        var currentTime = storeLocalTime.TimeOfDay;
        var currentDay = storeLocalTime.DayOfWeek;
        if (StoreAppService.Menus == null)
            MenuList = await StoreAppService.GetFilteredMenusAsync();

        MenuList = MenuList
            .Where(m => IsMenuActive(m, currentDay, currentTime))
            .OrderBy(m => GetEarliestStartTime(m, currentDay))
            .Distinct().ToList();
        if (!MenuList.Any())
            return; // No active menus

        if (!string.IsNullOrWhiteSpace(MenuId) && MenuList.Any(m => m.id.ToLower() == MenuId.ToLower()))
            selectedMenu = MenuList.FirstOrDefault(m => m.id.ToLower() == MenuId.ToLower());
        else
            selectedMenu = MenuList.FirstOrDefault();
    }

    private void LoadCategoryFoodItems()
    {
        SearchFoodItems();
    }


    private bool IsMenuActive(Menu menu, DayOfWeek currentDay, TimeSpan currentTime)
    {
        Console.WriteLine($"Checking menu: {menu.Name}"); // Add a log here

        if (menu.IsDeleted || !menu.IsEnabled)
            return false; // Not active if deleted or not enabled

        var matchingDayHour = menu.DayHours.FirstOrDefault(dh => dh.DayOfWeek == currentDay);
        if (matchingDayHour != null)
        {
            Console.WriteLine($"\tDayHour found for {currentDay}.");
            if (matchingDayHour.IsClosed)
                return false; // Not active if closed

            if (matchingDayHour.TimeRanges.Any(tr => IsTimeRangeValid(tr, currentTime)))
                return true; // Active at this point
        }
        return false;
    }



    private bool IsTimeRangeValid(TimeRange timeRange, TimeSpan currentTime)
    {
        // Attempt to parse the StartTime and EndTime into DateTime objects to handle AM/PM
        if (DateTime.TryParse(timeRange.StartTime, out var startDateTime) &&
            DateTime.TryParse(timeRange.EndTime, out var endDateTime))
        {
            // Extract the TimeOfDay part, which is a TimeSpan
            var startTime = startDateTime.TimeOfDay;
            var endTime = endDateTime.TimeOfDay;

            // Now compare with currentTime
            return currentTime >= startTime && currentTime <= endTime;
        }
        else
        {
            Console.WriteLine($"Error parsing time range: Start: {timeRange.StartTime}, End: {timeRange.EndTime}");
            return false;
        }
    }


    private TimeSpan GetEarliestStartTime(Menu menu, DayOfWeek currentDay)
    {
        return menu.DayHours
            .Where(dh => dh.DayOfWeek == currentDay)
            .SelectMany(dh => dh.TimeRanges)
            .Select(tr =>
            {
                if (DateTime.TryParse(tr.StartTime, out var dateTime))
                {
                    return dateTime.TimeOfDay;
                }
                else
                {
                    Console.WriteLine($"Error parsing start time for menu: {menu.Name}, Start: {tr.StartTime}");
                    return TimeSpan.MaxValue; // Fallback to max value to ensure this doesn't affect the min calculation negatively.
                }
            })
            .Min();
    }


    string[] ResolveToday(Menu? menu)
    {
        if (StoreAppService.CurrentStore == null || menu == null) return new[] { "-" };

        Console.WriteLine("StoreAppService.CurrentStore.TimeZoneId: " + StoreAppService.CurrentStore.TimeZoneId);
        var today = CommonUtilities.ConvertToLocalTime(DateTime.UtcNow, StoreAppService.CurrentStore.TimeZoneId).DayOfWeek;
        var dayHours = menu.DayHours.FirstOrDefault(d => d.DayOfWeek == today);
        if (dayHours == null) return new[] { "-" };

        return dayHours.ToString().Split("|");
    }

    private void SelectMenu(string menuId)
    {
        selectedMenu = MenuList.FirstOrDefault(m => m.id.ToLower() == menuId.ToLower());
        TodayMenuHours = ResolveToday(selectedMenu);
        LoadDefaultCategory();
        LoadCategoryFoodItems();
        StateHasChanged();
    }



    async Task ViewFoodOptions(FoodItem? foodItem)
    {
        var dic = new Dictionary<string, object>();
        var dialogOptions = new DialogOptions() { CssClass = "custom-dialog-extra-wide" };

        dic.Add("SelectedMenu", selectedMenu);
        dic.Add("FoodItem", foodItem);
        dic.Add("OnChange", EventCallback.Factory.Create(this, RefreshPage));
        var title = StoreAppService.ResolveLanguage(selectedCategory.Names);
        await DialogService.OpenAsync<FoodOptionsDialog>(title, dic, dialogOptions);
    }

    void RefreshPage()
    {
        StateHasChanged();
    }


    private string ResolveImagePath(FoodItem foodItem)
    {
        return StoreAppService.GetFoodItemImageUrl(foodItem);
    }

    private string ResolveFoodItemName(FoodItem foodItem)
    {
        return foodItem.Code + " - " + StoreAppService.ResolveLanguage(foodItem.Names);
    }

    private string ResolveFoodItemPrice(FoodItem foodItem)
    {
        if (selectedMenu == null)
            return "N/A";
        var priceLists = StoreAppService.GetActivePriceLists(selectedMenu);
        var price = StoreAppService.GetLowestFoodItemPrice(foodItem, priceLists);
        return price.ToString("C");
    }



    private void SelectCategory(Category category)
    {
        searchTerm = "";
        selectedCategory = category;
        SearchFoodItems();
    }

    [JSInvokable]
    public async Task SwitchToNextCategory()
    {
        // Logic to switch to the next category
        int currentIndex = Categories.IndexOf(selectedCategory);
        if (currentIndex < Categories.Count - 1)
            selectedCategory = Categories[currentIndex + 1];

        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async Task SwitchToPreviousCategory()
    {
        // Logic to switch to the previous category
        int currentIndex = Categories.IndexOf(selectedCategory);
        if (currentIndex > 0)
            selectedCategory = Categories[currentIndex - 1];

        await InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        await JSRuntime.InvokeVoidAsync("removeScrollHandling");
    }

    void SearchFoodItems()
    {
        filteredMenuFoodItems = new List<MenuFoodItem>();
        if (selectedCategory == null || StoreAppService.FoodItems == null)
        {
            return;
        }
        if (string.IsNullOrEmpty(searchTerm))
        {
            filteredMenuFoodItems = StoreAppService.ConvertMenuItemsToMenuFoodItems(selectedCategory.FoodItems);
        }
        else
        {
            var foodItems = StoreAppService.FoodItems?.
                Where(f => f.Name.Contains(searchTerm, StringComparison.CurrentCultureIgnoreCase)
                || f.Code.Contains(searchTerm, StringComparison.CurrentCultureIgnoreCase)).Select(f => f.id).ToList();
            if (foodItems != null && foodItems.Any())
            {
                var menuItems = selectedMenu?.Categories.SelectMany(c => c.FoodItems).Where(f => foodItems.Contains(f.FoodItemId)).ToList();
                if (menuItems != null && menuItems.Any())
                    filteredMenuFoodItems = StoreAppService.ConvertMenuItemsToMenuFoodItems(menuItems);
            }
        }
        StateHasChanged();
    }



    void clearSearchText()
    {
        searchTerm = "";
        SearchFoodItems();
    }

    private void PrintHello()
    {
        var js = (IJSInProcessRuntime)JSRuntime;
        js.InvokeVoid("printHello");
    }
}