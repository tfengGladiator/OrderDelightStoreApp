@page "/kitchenView0"
@inject StoreAppService StoreAppService
@inject IJSRuntime JSRuntime
@using Syncfusion.Blazor.Kanban

<RadzenCard Class="rz-3 card-full-height">
    <SfKanban DataSource="@AllShoppingCartFoodItems" KeyField="Status" AllowDragAndDrop="true">
        <KanbanColumns>
            <KanbanColumn HeaderText="New" KeyField="@(new List<string>() {"New"})"></KanbanColumn>
            <KanbanColumn HeaderText="Work In Progress" KeyField="@(new List<string>() {"WorkInProgress"})"></KanbanColumn>
            <KanbanColumn HeaderText="Ready" KeyField="@(new List<string>() {"Ready"})"></KanbanColumn>
            <KanbanColumn HeaderText="Served" KeyField="@(new List<string>() {"Served"})"></KanbanColumn>
        </KanbanColumns>
        <KanbanCardSettings>
            <Template Context="foodItemSelected">
                @{
                   var fis = foodItemSelected as FoodItemSelected;
                }
                <div class="food-item">
                    <img src="@ResolveImagePath(fis.FoodItem)" alt="Food Image" onerror="imageError(this)" class="food-image">
                    <span class="food-price">@ResolveFoodItemPrice(fis)</span>
                    <div class="food-info">
                        <span class="food-name">@ResolveFoodItemName(fis)</span>
                    </div>
                </div>
            </Template>
        </KanbanCardSettings>
    </SfKanban> 
</RadzenCard>
<style>

    .food-list-container {
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: center;
        width: 100%;
        height: 100%;
        max-height: 600px;
    }
    .centered-text {
        text-align: center;
        width: 100%;
        padding-bottom: 40px;
        // Add padding to push the up arrow down
    }


    .card-full-height {
        height: 100%; /* Ensures the card fills the height it's allowed */
        min-height: 100vh; /* Ensures the card fills the viewport height */
        display: flex;
        flex-direction: column;
    }


    .centered-content {
        display: flex;
        justify-content: center; /* Horizontally center the content */
        align-items: top; /* Incorrect if meant to center vertically; use 'flex-start' for aligning to the top */
        text-align: center;
        width: 100%; /* Ensures full width */
        /*  height: 100%; Full height for vertical centering */
    }


    .food-list-container {
        display: flex;
        flex-direction: column;
        justify-content: flex-start; /* Aligns content to the top */
        align-items: center; /* Keeps items centered horizontally */
        width: 100%; /* Ensure it takes full width */
        height: 100%; /* Stretch to fill container height */
        max-height: 600px; /* Maximum height before scrolling starts */
        overflow-y: auto; /* Enables vertical scrolling */
    }

    .scroll-arrow {
        @* position: absolute; *@
        width: 100%;
        text-align: center;
        cursor: pointer;
        font-size: 24px;        // Visible size 
        color: #666;
        z-index: 1000; // Ensure it's on top
    }

    .up-arrow {
       // top: -30px;
        // Move the arrow up outside the container
    }

    .down-arrow {
      //  bottom: -30px;
        // Move the arrow down outside the container
    }





</style>
@code {
    public List<FoodItemSelected> AllShoppingCartFoodItems { get; set; } = new List<FoodItemSelected>();
    FoodItemSelected _draggingItem;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("Invoking JS for setupScrollArrows...");
            await JSRuntime.InvokeVoidAsync("setupScrollArrows");
        }
    }


    protected override async Task OnInitializedAsync()
    {
        AllShoppingCartFoodItems = await StoreAppService.GetFoodItemsSelectedAsync();
        foreach(var item in AllShoppingCartFoodItems)
        {
           if(string.IsNullOrWhiteSpace(item.Status))
                item.Status = "New";

            Console.WriteLine($"{item.FoodItem.Name}: " + item.Status);
        }
        Console.WriteLine("AllShoppingCartFoodItems: " + AllShoppingCartFoodItems.Count);
    }

    string ResolveImagePath(FoodItem foodItem)
    {
        return StoreAppService.GetFoodItemImageUrl(foodItem);
    }

    Task ViewDetails(FoodItemSelected foodItemSelected)
    {
        return Task.Delay(0);
    }

    string ResolveFoodItemPrice(FoodItemSelected foodItemSelected)
    {
        return foodItemSelected.FoodItem.Price.ToString("C2");
    }
    string ResolveFoodItemName(FoodItemSelected foodItemSelected)
    {
        return foodItemSelected.FoodItem.Code +"-"+ foodItemSelected.FoodItem.Name;
    }

    string ResolveStatusDescription(string status)
    {
        var foodItems = GetFoodItemsSelected(status);
        var count = foodItems.Count;
        return status switch
        {
            "New" => $"New Order Items ({count})",
            "WorkInProgress" => $"Work In Progress ({count})",
            "Ready" => $"Ready ({count})",
            "Served" => $"Served ({count})",
            "Cancelled" => $"Cancelled ({count})",
            _ => "Unknown"
        };
    }

    List<FoodItemSelected> GetFoodItemsSelected(string status)
    {
        if (status == "New")
        {
            return AllShoppingCartFoodItems.Where(f => f.Status == "Open" || f.Status == "New" || string.IsNullOrWhiteSpace(f.Status)).ToList();
        }
        else if (status == "WorkInProgress")
        {
            return AllShoppingCartFoodItems.Where(f => f.Status == "WorkInProgress").ToList();
        }
        else if (status == "Ready")
        {
            return AllShoppingCartFoodItems.Where(f => f.Status == "Ready").ToList();
        }
        else if (status == "Served")
        {
            return AllShoppingCartFoodItems.Where(f => f.Status == "Served").ToList();
        }
        else if (status == "Cancelled")
        {
            return AllShoppingCartFoodItems.Where(f => f.Status == "Cancelled").ToList();
        }
        return new List<FoodItemSelected>();
    }

    void DragStart(DragEventArgs e, FoodItemSelected item)
    {
        _draggingItem = item;  // Store the item reference when dragging starts
        Console.WriteLine($"Started dragging: {item.FoodItem.Name}");
    }

    void DropItem(DragEventArgs e, string newStatus)
    {
        Console.WriteLine($"Attempting to drop to {newStatus}");  // Check if this logs
        if (_draggingItem != null)
        {
            Console.WriteLine($"Dropped item {_draggingItem.FoodItem.Name} to {newStatus}");
            _draggingItem.Status = newStatus;
            _draggingItem = null;
            StateHasChanged();  // Ensure the UI updates.
        }
        else
        {
            Console.WriteLine("No item was being dragged.");  // This checks if the item reference was lost.
        }
    }

}
